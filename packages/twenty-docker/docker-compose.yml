# Name directive is optional in newer compose versions
# name: twenty

services:
  # The 'change-vol-ownership' service block has been completely REMOVED.

  server:
    image: 'twentycrm/twenty:${TAG:-latest}'
    volumes:
      # CORRECTED: Variable interpolation removed, path hardcoded
      - server-local-data:/app/packages/twenty-server/.local-storage
      - docker-data:/app/docker-data
    ports:
      - "3000:3000" # This exposes port 3000 on the host - might not be needed if only accessing via Traefik? Keep for now.
    environment:
      NODE_PORT: 3000
      PG_DATABASE_URL: postgres://${PG_DATABASE_USER:-postgres}:${PG_DATABASE_PASSWORD:-postgres}@${PG_DATABASE_HOST:-db}:${PG_DATABASE_PORT:-5432}/default
      SERVER_URL: ${SERVER_URL} # IMPORTANT: Ensure this is set correctly in Coolify Env Vars (e.g., https://crm.medphysapps.intranet.medphys.com.mx:8443)
      REDIS_URL: ${REDIS_URL:-redis://redis:6379}

      STORAGE_TYPE: ${STORAGE_TYPE} # Ensure required env vars are set in Coolify
      STORAGE_S3_REGION: ${STORAGE_S3_REGION}
      STORAGE_S3_NAME: ${STORAGE_S3_NAME}
      STORAGE_S3_ENDPOINT: ${STORAGE_S3_ENDPOINT}

      APP_SECRET: ${APP_SECRET:-replace_me_with_a_random_string} # Ensure required env vars are set in Coolify

      # --- Commented out env vars kept for reference ---
      # MESSAGING_PROVIDER_GMAIL_ENABLED: ${MESSAGING_PROVIDER_GMAIL_ENABLED}
      # ... etc ...

    depends_on:
      # REMOVED: Dependency on change-vol-ownership
      db: # KEEP: Dependency on database
        condition: service_healthy
    healthcheck:
      test: curl --fail http://localhost:3000/healthz
      interval: 5s
      timeout: 5s
      retries: 10
    restart: always
    # --- ADDED TRAEFIK LABELS ---
    labels:
      - "traefik.enable=true"
      # Router for HTTPS on port 8443
      - "traefik.http.routers.twenty-crm-https.rule=Host(`crm.medphysapps.intranet.medphys.com.mx`)" # Use your chosen hostname
      - "traefik.http.routers.twenty-crm-https.entrypoints=https" # Use the 'https' entrypoint (port 8443)
      - "traefik.http.routers.twenty-crm-https.tls=true"
      - "traefik.http.routers.twenty-crm-https.tls.certresolver=letsencrypt" # Use your ACME resolver
      - "traefik.http.routers.twenty-crm-https.service=twenty-crm-svc" # Link to service below
      # Service definition pointing to internal port
      - "traefik.http.services.twenty-crm-svc.loadbalancer.server.port=3000" # Twenty server listens on 3000
      # Optional HTTP Redirect Router
      #- "traefik.http.routers.twenty-crm-http.rule=Host(`crm.medphysapps.intranet.medphys.com.mx`)"
      #- "traefik.http.routers.twenty-crm-http.entrypoints=http"
      #- "traefik.http.routers.twenty-crm-http.middlewares=redirect-to-https@file" # Use Coolify's redirect middleware if needed

  worker:
    image: 'twentycrm/twenty:${TAG:-latest}'
    # volumes: section REMOVED for worker
    command: ["yarn", "worker:prod"]
    environment:
      PG_DATABASE_URL: postgres://${PG_DATABASE_USER:-postgres}:${PG_DATABASE_PASSWORD:-postgres}@${PG_DATABASE_HOST:-db}:${PG_DATABASE_PORT:-5432}/default
      SERVER_URL: ${SERVER_URL} # Ensure required env vars are set in Coolify
      REDIS_URL: ${REDIS_URL:-redis://redis:6379}
      DISABLE_DB_MIGRATIONS: "true"

      STORAGE_TYPE: ${STORAGE_TYPE} # Ensure required env vars are set in Coolify
      STORAGE_S3_REGION: ${STORAGE_S3_REGION}
      STORAGE_S3_NAME: ${STORAGE_S3_NAME}
      STORAGE_S3_ENDPOINT: ${STORAGE_S3_ENDPOINT}

      APP_SECRET: ${APP_SECRET:-replace_me_with_a_random_string} # Ensure required env vars are set in Coolify

      # --- Commented out env vars kept for reference ---
      # MESSAGING_PROVIDER_GMAIL_ENABLED: ${MESSAGING_PROVIDER_GMAIL_ENABLED}
      # ... etc ...

    depends_on:
      db:
        condition: service_healthy
      server:
        condition: service_healthy
    restart: always

  db:
    image: postgres:16
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${PG_DATABASE_USER:-postgres} # Ensure required env vars are set in Coolify
      POSTGRES_PASSWORD: ${PG_DATABASE_PASSWORD:-postgres} # Ensure required env vars are set in Coolify
    healthcheck:
      test: pg_isready -U ${PG_DATABASE_USER:-postgres} -h localhost -d postgres
      interval: 5s
      timeout: 5s
      retries: 10
    restart: always

  redis:
    image: redis
    restart: always

volumes:
  # Note: Coolify will likely prefix these with the app ID when creating them
  docker-data:
  db-data:
  server-local-data:

# Note: Coolify will manage attaching this stack to the correct network
# The network definition here might be ignored or used by Coolify
# networks:
#  default: # Assuming default network name if not specified per service
#    name: j4k... # Coolify usually creates a unique network
#    external: true # Check if Coolify needs this true or false
